entrypoints Program ;
Program.            Program	    ::= [Def] ;

DefFunc.	        Def         ::= Type Ident "(" [Arg] ")" Block ;
DefClass.           Def         ::= "class" Ident Extend "{" [Feature] "}" ;
separator nonempty Def "" ;

Arg. 	            Arg         ::= Type Ident;
separator Arg "," ;

NoExtend.           Extend      ::= "" ;
Extend.             Extend      ::= "extends" Ident ;

Atribute.           Feature     ::= Type [Item] ";" ;
Method.             Feature     ::= Type Ident "(" [Arg] ")" Block ;
Empty.              Feature     ::= ";" ;
separator Feature "" ;

NoInit.             Item        ::= Ident ; 
Init.               Item        ::= Ident "=" Expr ;
separator nonempty Item "," ;

Block.              Block       ::= "{" [Stmt] "}" ;

SEmpty.             Stmt       ::= ";" ;
SBlock.             Stmt       ::= Block ;
SExp.               Stmt       ::= Expr  ";" ;
Decl.               Stmt       ::= Type [Item] ";" ;
Ass.                Stmt       ::= Expr "=" Expr  ";" ;
Incr.               Stmt       ::= Expr "++"  ";" ;
Decr.               Stmt       ::= Expr "--"  ";" ;
Ret.                Stmt       ::= "return" Expr ";" ;
VRet.               Stmt       ::= "return" ";" ;
While.              Stmt       ::= "while" "(" Expr ")" Stmt ;
ForEach.            Stmt       ::= "for" "(" Type Ident ":" Expr ")" Stmt ;
CondElse.           Stmt       ::= "if" "(" Expr ")" Stmt "else" Stmt  ;
Cond.               Stmt        ::= "if" "(" Expr ")" Stmt  ;
separator  Stmt "" ;

Int.                Type        ::= "int" ;
Str.                Type        ::= "string" ;
Bool.               Type        ::= "boolean" ;
Void.               Type        ::= "void" ;
internal   Fun.     Type        ::= Type "(" [Type] ")" ;
TArray.             Type        ::= Type "[]" ;
TClass.             Type        ::= Ident ;
separator  Type "," ;

EVar.               Expr8       ::= Ident ;
EApp.               Expr8       ::= Ident "(" [Expr] ")" ;
EArrayVal.          Expr8       ::= Expr8 "[" Expr "]" ;
EFeature.           Expr7       ::= Expr7 "." Expr8 ;
ELitInt.            Expr6       ::= Integer ;
ELitTrue.           Expr6       ::= "true" ;
ELitFalse.          Expr6       ::= "false" ;
ELitNull.           Expr6       ::= "null" ;
ELitString.         Expr6       ::= String ;
Cast.               Expr6       ::= "(" Expr ")" Expr6 ;
NewArray.           Expr6       ::= "new" Type "[" Expr "]" ;
NewClass.           Expr6       ::= "new" Ident ;
Neg.                Expr5       ::= "-" Expr6 ;
Not.                Expr5       ::= "!" Expr6 ;
EMul.               Expr4       ::= Expr4 MulOp Expr5 ;
EAdd.               Expr3       ::= Expr3 AddOp Expr4 ;
ERel.               Expr2       ::= Expr2 RelOp Expr3 ;
EAnd.               Expr1       ::= Expr2 "&&" Expr1 ;
EOr.                Expr        ::= Expr1 "||" Expr ;
coercions  Expr 8 ;
separator  Expr "," ;

Plus.               AddOp       ::= "+" ;
Minus.              AddOp       ::= "-" ;
Times.              MulOp       ::= "*" ;
Div.                MulOp       ::= "/" ;
Mod.                MulOp       ::= "%" ;
LTH.                RelOp       ::= "<" ;
LE.                 RelOp       ::= "<=" ;
GTH.                RelOp       ::= ">" ;
GE.                 RelOp       ::= ">=" ;
EQU.                RelOp       ::= "==" ;
NE.                 RelOp       ::= "!=" ;

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;
